test: 
  name: ingyu-test # 결과 보고서에 표시할 테스트 명
  description: >- # 결과 보고서에 표시할 해당 테스트에 대한 자세한 설명, >- 은 yaml 에서 줄바꿈이 제거 되고 여러 줄을 한줄로 연결해 인식하게 하는 명령어, 아래의 설명글도 사실은 "이건 인규가 테스트한 벤치마크 입니다" 라고 인식될 것임
    ingyu_test
  workers:
    number: 1  # 이 벤치마크를 실행할 프로세스의 수, 해당 개수 만큼 이 파일에 기입된 내용대로 측정 작업을 병렬로 실행한다. 예를 들어 2를 입력하면 병렬로 동시에 2개의 프로세스가 실행
  rounds: # 이 파일로 설정대로 측정할때 작업 내용을 구분하는 한 회를 지칭하는 단위
    - label: single-test # 해당 라운드를 지칭하는 약칭
      description: "ingyu round test"
      txNumber: 100  #해당 라운드에서 실행할 트랜잭션 수: n개 , txNumber 와 txDuration은 충돌 우려가 있기에 같이 사용하지 않도록 한다.  txNumber: 100, txDuration: 5, tps: 10 같은 경우를 상상하면 됨
      # txDuration: 10 #해당 라운드에서 트랜잭션을 전달할때 사용될 총 시간, 예를 들어 30이라고 설정했다면 해당 라운드의 트랜잭션 전송 작업은 30초동안만 진행함
      rateControl: # 해당 라운드에서 사용할 속도 컨트롤러를 설정하는 옵션, 아래의 type 에서 속도 컨트롤 메커니즘을 설정 및 해당 메커니즘 관련 옵션을 설정할 수 있음. 메커니즘을 여러개 복합적으로 쓰는 것도 가능
        type: fixed-rate  # fixed-rate: 초당 일정한 속도로 트랜잭션을 전송
        opts:
          tps: 1 # fixed-rate 방식으로 초당 n개의 트랜잭션을 전송하겠다의 의미
      workload:
        module: /srv/project/nodejs/besu_caliper/test_file/sendTransaction.js  # 실행할 작업의 파일 경로
        # arguments:  # 실행할 작업 js파일에 전달할 인자
        #   toAddress: "0xf17f52151EbEF6C7334FAD080c5704D77216b732" # A: B => A는 js 파일에 전달했을 때 사용하기 위한 변수명, B는 해당 변수에 담을 값
        #   transferAmount: 1